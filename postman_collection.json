{
  "info": {
    "_postman_id": "e4a7c7c8-5f4a-4d3b-8c3d-5e6f7a8b9c0d",
    "name": "Goldmine Pro End-to-End Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Complete end-to-end test suite for the Goldmine Pro investment platform"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register New User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user.balance).to.eql(0);",
                  "});",
                  "",
                  "// Store token for subsequent requests",
                  "pm.environment.set('userToken', pm.response.json().token);",
                  "pm.environment.set('userId', pm.response.json().user.id);",
                  "pm.environment.set('userMobile', '9000000001');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test User\",\n    \"mobile\": \"9000000001\",\n    \"password\": \"Test@1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login User (Sanity Check)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token and user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user.mobile).to.eql('9000000001');",
                  "});",
                  "",
                  "// Update token for user session",
                  "pm.environment.set('userToken', pm.response.json().token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mobile\": \"9000000001\",\n    \"password\": \"Test@1234\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Plans & Purchases",
      "item": [
        {
          "name": "Get All Product Plans",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has plans array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Verify each plan has required properties",
                  "    jsonData.forEach(function(plan) {",
                  "        pm.expect(plan).to.have.property('id');",
                  "        pm.expect(plan).to.have.property('name');",
                  "        pm.expect(plan).to.have.property('price');",
                  "        pm.expect(plan).to.have.property('dailyIncome');",
                  "        pm.expect(plan).to.have.property('totalReturn');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/plans",
              "host": ["{{baseUrl}}"],
              "path": ["api", "plans"]
            }
          },
          "response": []
        },
        {
          "name": "Try to Purchase Plan (Balance Insufficient)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test - should be 400 due to insufficient balance\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message for insufficient balance\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('insufficient');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"planId\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/purchase",
              "host": ["{{baseUrl}}"],
              "path": ["api", "purchase"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Recharge Flow",
      "item": [
        {
          "name": "Request Wallet Recharge",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has recharge data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('recharge');",
                  "    pm.expect(jsonData.recharge.status).to.eql('pending');",
                  "    pm.expect(jsonData.recharge.utr).to.eql('UTRTEST001');",
                  "});",
                  "",
                  "// Store recharge ID for admin approval",
                  "pm.environment.set('rechargeId', pm.response.json().recharge.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 1000,\n    \"utr\": \"UTRTEST001\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/recharge",
              "host": ["{{baseUrl}}"],
              "path": ["api", "recharge"]
            }
          },
          "response": []
        },
        {
          "name": "Get Recharge History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has recharge history\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Check that our recharge request is in the history",
                  "    var testRecharge = jsonData.find(r => r.utr === 'UTRTEST001');",
                  "    pm.expect(testRecharge).to.not.be.undefined;",
                  "    pm.expect(testRecharge.status).to.eql('pending');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/recharge/history",
              "host": ["{{baseUrl}}"],
              "path": ["api", "recharge", "history"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Operations",
      "item": [
        {
          "name": "Admin Login (with admin credentials)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has admin token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user.is_admin).to.be.true;",
                  "});",
                  "",
                  "// Store admin token for admin operations",
                  "pm.environment.set('adminToken', pm.response.json().token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mobile\": \"admin\",\n    \"password\": \"admin123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Admin: Get All Recharges",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has recharges array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Verify our recharge is present",
                  "    var testRecharge = jsonData.find(r => r.utr === 'UTRTEST001');",
                  "    pm.expect(testRecharge).to.not.be.undefined;",
                  "    pm.expect(testRecharge.status).to.eql('pending');",
                  "    pm.expect(testRecharge.userId).to.eql(pm.environment.get('userId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/admin/recharges",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "recharges"]
            }
          },
          "response": []
        },
        {
          "name": "Admin: Approve Recharge",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response shows recharge approved\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('recharge');",
                  "    pm.expect(jsonData.recharge.status).to.eql('approved');",
                  "    pm.expect(jsonData.message).to.eql('Recharge approved successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/admin/recharge/{{rechargeId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "recharge", "{{rechargeId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Admin: Get Dashboard Stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has dashboard statistics\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalUsers');",
                  "    pm.expect(jsonData).to.have.property('totalPurchases');",
                  "    pm.expect(jsonData).to.have.property('totalWithdrawals');",
                  "    pm.expect(jsonData).to.have.property('totalRecharges');",
                  "    pm.expect(jsonData).to.have.property('pendingRecharges');",
                  "    pm.expect(jsonData).to.have.property('pendingWithdrawals');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminTeacher}}"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/admin/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "dashboard"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Verification After Recharge",
      "item": [
        {
          "name": "Get Dashboard Stats After Recharge",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User balance updated after recharge approval\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.balance).to.be.greaterThan(0);",
                  "    pm.expect(jsonData.balance).to.eql(1000); // Our recharge amount",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/dashboard/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"]
            }
          },
          "response": []
        },
        {
          "name": "Purchase Plan After Recharge",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Plan purchased successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('purchase');",
                  "    pm.expect(jsonData.purchase.status).to.eql('active');",
                  "    pm.expect(jsonData.message).to.eql('Plan purchased successfully');",
                  "});",
                  "",
                  "// Store purchase ID for later verification",
                  "pm.environment.set('purchaseId', pm.response.json().purchase.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"planId\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/purchase",
              "host": ["{{baseUrl}}"],
              "path": ["api", "purchase"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Daily Income & Withdrawal",
      "item": [
        {
          "name": "Simulate Daily Income (Development)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Daily income successfully distributed\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Daily income distributed to active plans');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/simulate-daily-income",
              "host": ["{{baseUrl}}"],
              "path": ["api", "simulate-daily-income"]
            }
          },
          "response": []
        },
        {
          "name": "Request Withdrawal",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Withdrawal request submitted successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('withdrawal');",
                  "    pm.expect(jsonData.withdrawal.status).to.eql('pending');",
                  "    pm.expect(jsonData.message).to.eql('Withdrawal request submitted successfully');",
                  "    ",
                  "    // Verify GST calculation",
                  "    pm.expect(jsonData.withdrawal.amount).to.eql(500);",
                  "    pm.expect(jsonData.withdrawal.gst).to.eql(15); // 3% of 500",
                  "    pm.expect(jsonData.withdrawal.netAmount).to.eql(485); // 500 - 15",
                  "});",
                  "",
                  "// Store withdrawal ID for admin processing",
                  "pm.environment.set('withdrawalId', pm.response.json().withdrawal.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 500,\n    \"method\": \"upi\",\n    \"details\": \"7047571829@upi\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/withdraw",
              "host": ["{{baseUrl}}"],
              "path": ["api", "withdraw"]
            }
          },
          "response": []
        },
        {
          "name": "Get Withdrawal History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has withdrawal history\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Check that our withdrawal request is in the history",
                  "    var testWithdrawal = jsonData.find(w => w.details === '7047571829@upi');",
                  "    pm.expect(testWithdrawal).to.not.be.undefined;",
                  "    pm.expect(testWithdrawal.status).to.eql('pending');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/withdraw/history",
              "host": ["{{baseUrl}}"],
              "path": ["api", "withdraw", "history"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin Withdrawal Processing",
      "item": [
        {
          "name": "Admin: Get All Withdrawals",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has withdrawals array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    ",
                  "    // Verify our withdrawal is present",
                  "    var testWithdrawal = jsonData.find(w => w.id === pm.environment.get('withdrawalId'));",
                  "    pm.expect(testWithdrawal).to.not.be.undefined;",
                  "    pm.expect(testWithdrawal.status).to.eql('pending');",
                  "    pm.expect(testWithdrawal.userId).to.eql(pm.environment.get('userId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/admin/withdrawals",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "withdrawals"]
            }
          },
          "response": []
        },
        {
          "name": "Admin: Approve Withdrawal",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response shows withdrawal approved\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('withdrawal');",
                  "    pm.expect(jsonData.withdrawal.status).to.eql('approved');",
                  "    pm.expect(jsonData.message).to.eql('Withdrawal approved successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}"
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/admin/withdrawal/{{withdrawalId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "admin", "withdrawal", "{{withdrawalId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Referral System",
      "item": [
        {
          "name": "Get Dashboard with Referral Link",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has referral link\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('referralLink');",
                  "    pm.expect(jsonData.referralLink).to.include('?ref=');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/dashboard/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"]
            }
          },
          "response": []
        },
        {
          "name": "Register User via Referral",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Referred user registered successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "});",
                  "",
                  "// Store referred user token",
                  "pm.environment.set('referredUserToken', pm.response.json().token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Referred User\",\n    \"mobile\": \"9000000002\",\n    \"password\": \"Test@1234\",\n    \"referralCode\": \"{{userId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "register"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Security & Edge Cases",
      "item": [
        {
          "name": "Try to Access Protected Endpoint without JWT",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test - should be 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has proper error message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.eql('Access token required');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/dashboard/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "dashboard", "stats"]
            }
          },
          "response": []
        },
        {
          "name": "Try Duplicate Recharge with Same UTR",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test - might be allowed with new ID but should be tracked\", function () {",
                  "    // This test checks if system handles duplicate UTRs properly",
                  "    pm.response.to.not.have.status(500);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 1000,\n    \"utr\": \"UTRTEST001\" // Same UTR as before\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/recharge",
              "host": ["{{baseUrl}}"],
              "path": ["api", "recharge"]
            }
          },
          "response": []
        },
        {
          "name": "Try Withdrawal Greater Than Balance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test - should be 400 due to insufficient balance\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message for insufficient balance\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('insufficient');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"amount\": 100000,  // Much higher than balance\n    \"method\": \"bank\",\n    \"details\": \"acc123456789\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/withdraw",
              "host": ["{{baseUrl}}"],
              "path": ["api", "withdraw"]
            }
          },
          "response": []
        },
        {
          "name": "Try Purchase Second Plan in Same Month (should fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status test - should be 400 due to one plan per month rule\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message for one plan per month rule\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error).to.include('one plan per month');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{userToken}}"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"planId\": 2\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/purchase",
              "host": ["{{baseUrl}}"],
              "path": ["api", "purchase"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}